Of course. It's frustrating when things don't work as expected. Providing the full context is the best way to solve the problem. Here is the complete and final code for all the files we've worked on for the Animated Git Change Explorer.
Backend File: package.json
This file defines the Node.js project and its dependencies.
{
  "name": "agce-backend",
  "version": "1.0.0",
  "description": "Backend service for the Animated Git Change Explorer.",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "vitest"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "simple-git": "^3.25.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.4",
    "supertest": "^7.0.0",
    "vitest": "^1.6.0"
  }
}

Backend File: server.js
This is the Node.js Express server that handles cloning the repository and analyzing it.
import express from 'express';
import cors from 'cors';
import { simpleGit } from 'simple-git';
import { mkdtemp, rm } from 'fs/promises';
import path from 'path';
import os from 'os';

// Import mock data to be used as placeholders for complex analysis
import { 
    mockFileTreeHistory, 
    mockArchitectureNotes, 
    mockArchitectureDiagrams,
    mockFileContentBefore,
    mockFileContentAfter
} from './mockData.js';


const app = express();
const port = 3001;

app.use(cors());
app.use(express.json());

app.post('/api/analyze', async (req, res) => {
  const { repoUrl } = req.body;

  if (!repoUrl) {
    return res.status(400).json({ error: 'repoUrl is required in the request body.' });
  }

  const tempDirPrefix = path.join(os.tmpdir(), 'agce-');
  let tempDir;

  try {
    tempDir = await mkdtemp(tempDirPrefix);
    const git = simpleGit(tempDir);

    await git.clone(repoUrl, tempDir, ['--depth=50']);

    const log = await git.log();
    
    // Transform the raw git log into the data structure expected by the front-end.
    const commits = log.all.map(commit => ({
        oid: commit.hash,
        message: commit.message,
        author: commit.author_name,
        date: commit.date,
    })).reverse(); 

    // Assemble the final response payload.
    // In a real-world scenario, the mock data would be replaced by real analysis results
    // generated from the cloned repository content.
    const analysisPayload = {
        commits,
        fileTreeHistory: mockFileTreeHistory.slice(0, commits.length),
        architectureNotes: mockArchitectureNotes.slice(0, commits.length),
        architectureDiagrams: mockArchitectureDiagrams.slice(0, commits.length),
        fileContents: {
            before: mockFileContentBefore,
            after: mockFileContentAfter
        }
    };
    
    res.status(200).json(analysisPayload);

  } catch (error) {
    console.error('Processing error:', error);
    const errorMessage = error.message.includes('Authentication failed') || error.message.includes('could not read')
        ? 'Failed to clone repository. Please check the URL and ensure it is a public repository.' 
        : 'Failed to analyze commit history.';
    return res.status(500).json({ error: errorMessage });
  } finally {
    if (tempDir) {
      await rm(tempDir, { recursive: true, force: true });
    }
  }
});

if (process.env.NODE_ENV !== 'test') {
  app.listen(port, () => {
    console.log(`AGCE backend server listening on http://localhost:${port}`);
  });
}

export { app };

Backend File: mockData.js
This file contains the placeholder data for the features that require more complex analysis.
export const mockFileTreeHistory = [
    { name: "root", type: "folder", children: [ { name: "package.json", type: "file", status: "modified" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "added" }] }] },
    { name: "root", type: "folder", children: [ { name: "package.json", type: "file", status: "equal" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "modified" }, { name: "parser.ts", type: "file", status: "added" }] }] },
    { name: "root", type: "folder", children: [ { name: "package.json", type: "file", status: "modified" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "modified" }, { name: "parser.ts", type: "file", status: "equal" }, { name: "store.ts", type: "file", status: "added" }] }] },
    { name: "root", type: "folder", children: [ { name: "README.md", type: "file", status: "added" }, { name: "package.json", type: "file", status: "equal" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "equal" }, { name: "parser.ts", type: "file", status: "equal" }, { name: "store.ts", type: "file", status: "equal" }] }] },
    { name: "root", type: "folder", children: [ { name: "README.md", type: "file", status: "equal" }, { name: "package.json", type: "file", status: "equal" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "modified" }, { name: "parser.ts", type: "file", status: "equal" }, { name: "store.ts", type: "file", status: "equal" }, { name: "theme.ts", type: "file", status: "added" }] }] },
    { name: "root", type: "folder", children: [ { name: ".github", type: "folder", children: [{ name: "workflows", type: "folder", children: [{ name: "ci.yml", type: "file", status: "added" }] }] }, { name: "README.md", type: "file", status: "equal" }, { name: "package.json", type: "file", status: "equal" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "equal" }, { name: "parser.ts", type: "file", status: "equal" }, { name: "store.ts", type: "file", status: "equal" }, { name: "theme.ts", type: "file", status: "equal" }] }] },
    { name: "root", type: "folder", children: [ { name: ".github", type: "folder", children: [{ name: "workflows", type: "folder", children: [{ name: "ci.yml", type: "file", status: "equal" }] }] }, { name: "README.md", type: "file", status: "equal" }, { name: "package.json", type: "file", status: "equal" }, { name: "src", type: "folder", children: [{ name: "App.tsx", type: "file", status: "equal" }, { name: "parser.ts", type: "file", status: "equal" }, { name: "store.ts", type: "file", status: "equal" }, { name: "theme.ts", type: "file", status: "equal" }, { name: "api.ts", type: "file", status: "added" }] }] },
];

export const mockArchitectureNotes = [
    "**Initial Scaffolding:** This commit establishes the foundational architecture. The diagram shows a single component, **`App.tsx`**, which serves as the root of the application and initially contains all UI and logic.",
    "**Decoupling with a Service Module:** The introduction of **`parser.ts`** marks the first major architectural improvement. As shown in the diagram, a new link is formed from **`App.tsx`**, which now offloads complex diff-parsing logic to this dedicated service module. This improves modularity and testability.",
    "**Centralized State Management:** Adding **`store.ts`** signifies a shift to a more robust state pattern. A new **`Store`** node appears in the diagram, and **`App.tsx`** now connects to it, centralizing data flow and making the architecture more scalable by creating a single source of truth.",
    "**Improving Developer Experience:** No change is visible in the code architecture diagram. This commit adds a `README.md` file, which is a crucial project architecture decision for maintainability but does not alter the component structure.",
    "**Creating a Design System Foundation:** The new **`theme.ts`** module appears, centralizing design tokens (colors, fonts). **`App.tsx`** now links to this module, ensuring UI consistency and making sweeping visual changes easier to implement.",
    "**Automating Quality with DevOps:** This change is external to the application's runtime architecture and thus not visible in the diagram. Adding a CI/CD pipeline in `.github/` automates testing and deployment, a critical enhancement to the development process itself.",
    "**Implementing a Dedicated API Layer:** The creation of **`api.ts`** establishes a formal API abstraction. The new **`API`** node is now connected to **`App.tsx`**, which delegates all network communication to this layer. This decouples the UI from the specifics of data fetching.",
];

export const mockArchitectureDiagrams = [
    { nodes: [{ id: 'App', label: 'App.tsx', x: 250, y: 150 }], links: [] },
    { nodes: [{ id: 'App', label: 'App.tsx', x: 250, y: 80 }, { id: 'Parser', label: 'parser.ts', x: 250, y: 220 }], links: [{ source: 'App', target: 'Parser' }] },
    { nodes: [{ id: 'App', label: 'App.tsx', x: 150, y: 150 }, { id: 'Parser', label: 'parser.ts', x: 350, y: 80 }, { id: 'Store', label: 'store.ts', x: 350, y: 220 }], links: [{ source: 'App', target: 'Parser' }, { source: 'App', target: 'Store' }] },
    { nodes: [{ id: 'App', label: 'App.tsx', x: 150, y: 150 }, { id: 'Parser', label: 'parser.ts', x: 350, y: 80 }, { id: 'Store', label: 'store.ts', x: 350, y: 220 }], links: [{ source: 'App', target: 'Parser' }, { source: 'App', target: 'Store' }] },
    { nodes: [{ id: 'App', label: 'App.tsx', x: 150, y: 150 }, { id: 'Parser', label: 'parser.ts', x: 350, y: 50 }, { id: 'Store', label: 'store.ts', x: 350, y: 150 }, { id: 'Theme', label: 'theme.ts', x: 350, y: 250 }], links: [{ source: 'App', target: 'Parser' }, { source: 'App', target: 'Store' }, { source: 'App', target: 'Theme' }] },
    { nodes: [{ id: 'App', label: 'App.tsx', x: 150, y: 150 }, { id: 'Parser', label: 'parser.ts', x: 350, y: 50 }, { id: 'Store', label: 'store.ts', x: 350, y: 150 }, { id: 'Theme', label: 'theme.ts', x: 350, y: 250 }], links: [{ source: 'App', target: 'Parser' }, { source: 'App', target: 'Store' }, { source: 'App', target: 'Theme' }] },
    { nodes: [{ id: 'App', label: 'App.tsx', x: 150, y: 150 }, { id: 'Parser', label: 'parser.ts', x: 350, y: 50 }, { id: 'Store', label: 'store.ts', x: 350, y: 125 }, { id: 'Theme', label: 'theme.ts', x: 350, y: 200 }, { id: 'API', label: 'api.ts', x: 350, y: 275 }], links: [{ source: 'App', target: 'Parser' }, { source: 'App', target: 'Store' }, { source: 'App', target: 'Theme' }, { source: 'App', target: 'API' }] },
];

export const mockFileContentBefore = `// Before`;
export const mockFileContentAfter = `// After`;


Frontend File: React App Component
This is the complete, final version of the React application. It is now data-driven, fetching all its information from the backend service.
import React, { useState, useEffect, useMemo, createContext, useContext, useCallback } from 'react';
import { ChevronsRight, GitCommit, GitBranch, Play, Pause, FastForward, Rewind, File, Folder, Clock, User, Github, Loader2, Share2, Settings, Sun, Moon, Zap, GitMerge, AlertTriangle } from 'lucide-react';
import { AnimatePresence, motion } from 'framer-motion';

const ThemeContext = createContext({ theme: 'dark', toggleTheme: () => {} });
const ThemeProvider = ({ children }) => {
    const [theme, setTheme] = useState('dark');
    const toggleTheme = () => setTheme(prev => (prev === 'dark' ? 'light' : 'dark'));
    useEffect(() => { const root = window.document.documentElement; root.classList.remove(theme === 'dark' ? 'light' : 'dark'); root.classList.add(theme); }, [theme]);
    return (<ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>);
};

const RepoInput = ({ onRepoLoad }) => {
    const [url, setUrl] = useState('https://github.com/facebook/react');
    const [isLoading, setIsLoading] = useState(false);
    
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!url) return;
        setIsLoading(true);
        await onRepoLoad(url);
    };

    return (<motion.div initial={{ y: -20, opacity: 0 }} animate={{ y: 0, opacity: 1 }} className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-8 text-center"><h1 className="text-4xl md:text-5xl font-bold text-gray-800 dark:text-white">Animated Git Change Explorer</h1><p className="mt-4 text-lg text-gray-600 dark:text-gray-400">Visualize code evolution like never before.</p><form onSubmit={handleSubmit} className="mt-8 w-full max-w-xl"><div className="flex items-center bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg shadow-lg overflow-hidden"><Github className="h-6 w-6 ml-4 text-gray-400 dark:text-gray-500" /><input type="text" value={url} onChange={(e) => setUrl(e.target.value)} placeholder="Enter a public GitHub URL..." className="w-full p-4 bg-transparent text-gray-800 dark:text-white focus:outline-none" /><button type="submit" disabled={isLoading} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-6 disabled:bg-blue-400 disabled:cursor-not-allowed transition-colors">{isLoading ? <Loader2 className="animate-spin" /> : "Animate"}</button></div><p className="mt-2 text-sm text-gray-500 dark:text-gray-400">e.g., https://github.com/facebook/react or another public repository.</p></form></motion.div>);
};

const Header = ({ repoUrl, onReset }) => {
    const { theme, toggleTheme } = useContext(ThemeContext);
    return (<header className="flex items-center justify-between p-3 bg-white/70 dark:bg-gray-900/70 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800 sticky top-0 left-0 right-0 h-16 z-30">
        <div className="flex items-center gap-3 overflow-hidden">
            <button onClick={onReset} className="flex items-center gap-3">
                <GitBranch className="text-blue-500 h-6 w-6 flex-shrink-0"/>
                <h1 className="text-lg font-semibold text-gray-800 dark:text-white truncate hover:underline">{repoUrl}</h1>
            </button>
        </div>
        <div className="flex items-center gap-4"><button className="text-gray-500 hover:text-gray-800 dark:hover:text-white transition-colors"><Share2 size={20} /></button><button className="text-gray-500 hover:text-gray-800 dark:hover:text-white transition-colors"><Settings size={20} /></button><button onClick={toggleTheme} className="text-gray-500 hover:text-gray-800 dark:hover:text-white transition-colors">{theme === 'dark' ? <Sun size={20} /> : <Moon size={20} />}</button><button className="flex items-center gap-2 text-gray-500 hover:text-gray-800 dark:hover:text-white transition-colors"><User size={20} /><span className="text-sm font-medium hidden sm:inline">Sign In</span></button></div>
    </header>);
};

const CommitSelector = ({ commits, from, to, setFrom, setTo }) => {
    if (!commits || commits.length === 0) return null;
    const CommitOption = ({ commit }) => (<option value={commit.oid}>{commit.oid.substring(0, 7)} - {commit.message}</option>);
    return (<div className="flex flex-col md:flex-row items-center gap-4 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700"><div className="flex-1 w-full"><label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">From</label><select value={from} onChange={e => setFrom(e.target.value)} className="w-full p-2 rounded-md bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none">{commits.map(c => <CommitOption key={`from-${c.oid}`} commit={c} />)}</select></div><ChevronsRight className="mt-6 md:mt-0 text-gray-400 dark:text-gray-500" /><div className="flex-1 w-full"><label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">To</label><select value={to} onChange={e => setTo(e.target.value)} className="w-full p-2 rounded-md bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none">{commits.map(c => <CommitOption key={`to-${c.oid}`} commit={c} />)}</select></div></div>);
};

const FileTreeView = ({ tree, onFileSelect, selectedFile }) => {
    const FileStatusIcon = ({ status }) => ({added: <span className="text-green-500 font-bold">+</span>,modified: <span className="text-yellow-500 font-bold">M</span>,deleted: <span className="text-red-500 font-bold">-</span>,}[status] || null);
    const TreeNode = ({ node, level = 0, path = '' }) => {
        const [isOpen, setIsOpen] = useState(level < 2);
        const isFolder = node.type === 'folder';
        const currentPath = path ? `${path}/${node.name}` : node.name;
        const isSelected = !isFolder && selectedFile === currentPath;
        const variants = {hidden: { opacity: 0, x: -20, height: 0 },visible: { opacity: 1, x: 0, height: 'auto', transition: { duration: 0.3 } }};
        const flashVariant = {flash: { backgroundColor: "rgba(234, 179, 8, 0.3)", transition: { duration: 0.1, yoyo: Infinity, repeat: 3 } },normal: { backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.2)' : 'transparent' }};
        return (<motion.div layout initial="hidden" animate="visible" exit="hidden" variants={variants}><motion.div onClick={() => isFolder ? setIsOpen(!isOpen) : onFileSelect(currentPath)} className={`flex items-center gap-2 p-1.5 rounded-md cursor-pointer text-sm hover:bg-gray-200 dark:hover:bg-gray-700`} style={{ paddingLeft: `${level * 1.5 + 0.5}rem` }} variants={flashVariant} animate={node.status === 'modified' ? "flash" : "normal"}>{isFolder ? <Folder size={16} className={`transition-transform duration-200 ${isOpen ? 'text-blue-400' : 'text-gray-500'}`} /> : <File size={16} className="text-gray-500" />}<span className={`flex-1 truncate ${isSelected ? 'font-semibold text-blue-800 dark:text-blue-300' : ''}`}>{node.name}</span>{node.status !== 'equal' && <FileStatusIcon status={node.status} />}</motion.div><AnimatePresence>{isFolder && isOpen && node.children && (<motion.div layout initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>{node.children.map(child => <TreeNode key={currentPath + '/' + child.name} node={child} level={level + 1} path={currentPath === 'root' ? '' : currentPath} />)}</motion.div>)}</AnimatePresence></motion.div>);
    };
    return (<div className="h-full overflow-y-auto p-2"><h3 className="text-sm font-semibold p-2 mb-2 text-gray-500 dark:text-gray-400 uppercase tracking-wider">File System</h3><AnimatePresence>{tree ? <TreeNode key="root-node" node={tree} /> : <p className="text-xs text-gray-400 p-2">No file data available.</p>}</AnimatePresence></div>);
};

const AnimationViewer = ({ fromContent, toContent, progress, selectedFile, commit }) => {
    const [tooltip, setTooltip] = useState({ visible: false, content: '', x: 0, y: 0 });
    const dmp = useMemo(() => new window.diff_match_patch(), []);

    const handleLineClick = (event) => {
        event.stopPropagation();
        const rect = event.currentTarget.getBoundingClientRect();
        setTooltip({ visible: true, content: commit?.message || "No commit message available.", x: rect.left + window.scrollX, y: rect.top + window.scrollY - 10 });
    };

    const handleCloseTooltip = useCallback(() => { if (tooltip.visible) setTooltip({ ...tooltip, visible: false }); }, [tooltip]);

    const lineDiff = useMemo(() => {
        if (!fromContent || !toContent) return [];
        const { chars1, chars2, lineArray } = dmp.diff_linesToChars_(fromContent, toContent);
        const diffs = dmp.diff_main(chars1, chars2, false);
        dmp.diff_charsToLines_(diffs, lineArray);
        return diffs;
    }, [fromContent, toContent, dmp]);
    
    return (<div className="h-full bg-gray-800 rounded-lg overflow-hidden flex flex-col font-mono relative" onClick={handleCloseTooltip}><div className="flex-shrink-0 p-3 bg-gray-900 border-b border-gray-700 text-white text-sm">{selectedFile || "Select a file to see changes"}</div><div className="flex-grow overflow-auto p-4"><pre className="text-sm whitespace-pre-wrap leading-relaxed">{lineDiff.map(([op, text], i) => text.split('\n').filter((l, idx, arr) => !(l === '' && idx === arr.length - 1)).map((line, lineIndex) => {const isInsert = op === 1, isDelete = op === -1, isChange = isInsert || isDelete; const lineAnimation = {initial: { opacity: 0, x: isInsert ? 20 : (isDelete ? -20 : 0) },animate: { opacity: isInsert ? progress : (isDelete ? 1 - progress : 1), x: 0 },exit: { opacity: 0, x: isInsert ? -20 : 20 },}, bgColor = isInsert ? `rgba(22, 163, 74, ${progress * 0.3})` : isDelete ? `rgba(220, 38, 38, ${(1 - progress) * 0.3})` : 'transparent', sign = isInsert ? '+' : (isDelete ? '-' : ' ');return (<motion.div key={`${i}-${lineIndex}`} className={`flex ${isChange ? 'cursor-pointer' : ''}`} style={{ backgroundColor: bgColor }} {...lineAnimation} onClick={isChange ? handleLineClick : undefined}><span className={`w-8 select-none ${isInsert ? 'text-green-400' : isDelete ? 'text-red-400' : 'text-gray-500'}`}>{sign}</span><span className="flex-1">{line}</span></motion.div>);}))}</pre></div>
    <AnimatePresence>
        {tooltip.visible && <motion.div initial={{ opacity: 0, y: -10, scale: 0.95 }} animate={{ opacity: 1, y: 0, scale: 1 }} exit={{ opacity: 0, scale: 0.95 }} style={{ top: tooltip.y, left: tooltip.x }} className="absolute max-w-sm bg-black/80 text-white text-xs rounded-lg px-3 py-2 shadow-lg backdrop-blur-sm z-50 pointer-events-none -translate-y-full">
            <div className='flex items-start gap-2'><GitCommit size={14} className="mt-0.5 flex-shrink-0 text-gray-400"/> <span>{tooltip.content}</span></div>
        </motion.div>}
    </AnimatePresence>
    </div>);
};

const ArchitectureNotes = ({ note }) => {
    const renderNote = (text) => text.split('**').map((part, index) => index % 2 === 1 ? <strong key={index} className="font-bold text-white/90">{part}</strong> : part);
    return (<div className="bg-gray-100 dark:bg-gray-800/50 rounded-lg p-4 h-full overflow-y-auto"><h3 className="text-sm font-semibold mb-2 text-gray-500 dark:text-gray-400 uppercase tracking-wider flex items-center"><Zap size={14} className="mr-2 text-yellow-500"/>Architectural Note</h3><AnimatePresence mode="wait"><motion.div key={note} initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }} transition={{ duration: 0.2 }} className="text-gray-700 dark:text-gray-300 text-sm leading-relaxed space-y-2"><p>{renderNote(note || "No architectural notes for this commit.")}</p></motion.div></AnimatePresence></div>);
};

const ArchitectureDiagram = ({ diagram }) => {
    const { theme } = useContext(ThemeContext);
    if (!diagram) return null;
    const findNode = (id) => diagram.nodes.find(n => n.id === id);
    const nodeColors = { dark: { bg: '#2d3748', text: '#e2e8f0', border: '#4a5568' }, light: { bg: '#ffffff', text: '#2d3748', border: '#cbd5e0' } };
    const colors = nodeColors[theme];
    return (<div className="bg-gray-100 dark:bg-gray-800/50 rounded-lg p-4 h-full"><h3 className="text-sm font-semibold mb-2 text-gray-500 dark:text-gray-400 uppercase tracking-wider flex items-center"><GitMerge size={14} className="mr-2 text-blue-500"/>Architecture Diagram</h3><svg width="100%" height="100%" viewBox="0 0 500 300"><AnimatePresence>{diagram.links.map(({ source, target }) => { const sourceNode = findNode(source); const targetNode = findNode(target); if (!sourceNode || !targetNode) return null; return (<motion.line key={`${source}-${target}`} x1={sourceNode.x} y1={sourceNode.y} x2={targetNode.x} y2={targetNode.y} stroke={theme === 'dark' ? "#4a5568" : "#cbd5e0"} strokeWidth="1.5" initial={{ pathLength: 0, opacity: 0 }} animate={{ pathLength: 1, opacity: 1 }} transition={{ duration: 0.5, delay: 0.3 }} />);})}</AnimatePresence><AnimatePresence>{diagram.nodes.map(node => (<motion.g key={node.id} initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} transition={{ type: 'spring', stiffness: 260, damping: 20 }}><motion.rect x={node.x - 60} y={node.y - 20} width="120" height="40" rx="8" fill={colors.bg} stroke={colors.border} strokeWidth="2" /><text x={node.x} y={node.y + 5} textAnchor="middle" fill={colors.text} fontSize="12" fontWeight="medium">{node.label}</text></motion.g>))}</AnimatePresence></svg></div>);
};

const PlaybackControls = ({ isPlaying, onPlayPause, onRewind, onFastForward, speed, onSpeedChange }) => (<div className="flex items-center justify-center gap-4 p-3 bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800"><button onClick={onRewind} className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"><Rewind className="text-gray-700 dark:text-gray-300" /></button><button onClick={onPlayPause} className="p-3 rounded-full bg-blue-600 hover:bg-blue-700 text-white transition-colors shadow-lg">{isPlaying ? <Pause size={28} /> : <Play size={28} className="ml-1" />}</button><button onClick={onFastForward} className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"><FastForward className="text-gray-700 dark:text-gray-300" /></button><button onClick={onSpeedChange} className="w-16 p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors font-mono text-sm text-gray-700 dark:text-gray-300">{speed}x</button></div>);
const Timeline = ({ commits, currentIndex, onTimelineChange }) => {
    if (!commits?.length) return (<div className="p-4 text-center text-sm text-gray-500 dark:text-gray-400">Please select a valid commit range.</div>);
    const currentCommit = commits[currentIndex] ?? commits[0];
    return (<div className="flex flex-col p-4 gap-3"><input type="range" min="0" max={commits.length - 1} value={currentIndex} onChange={(e) => onTimelineChange(Number(e.target.value))} className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer" /><div className="flex justify-between text-xs text-gray-500 dark:text-gray-400"><span>{commits[0]?.message.slice(0, 40)}...</span><span>{commits[commits.length - 1]?.message.slice(0, 40)}...</span></div><div className="text-center text-sm p-2 bg-gray-100 dark:bg-gray-800 rounded-md"><p className="font-semibold text-gray-800 dark:text-gray-200">{currentCommit?.message}</p><p className="text-xs text-gray-600 dark:text-gray-400 mt-1">{currentCommit?.author} - {currentCommit ? new Date(currentCommit.date).toLocaleString() : ''}</p></div></div>);
};
const CommitHistory = ({ commits }) => (<div className="h-full overflow-y-auto p-2" data-testid="commit-history-panel"><h3 className="text-sm font-semibold p-2 mb-2 text-gray-500 dark:text-gray-400 uppercase tracking-wider">Commit History</h3>{commits && commits.length > 0 ? (<ul>{commits.map(commit => (<li key={commit.oid} data-testid="commit-history-item" className="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700"><p className="font-medium text-sm text-gray-800 dark:text-gray-200 truncate">{commit.message}</p><div className="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400 mt-1"><span className="flex items-center gap-1"><User size={12} /> {commit.author}</span><span className="flex items-center gap-1 font-mono"><GitCommit size={12} /> {commit.oid.substring(0, 7)}</span></div></li>))}</ul>) : (<p className="p-4 text-center text-sm text-gray-400">No commits in range.</p>)}</div>);

const AGCE_App = () => {
    const [appState, setAppState] = useState({
        view: 'input',
        repoUrl: '',
        error: null,
        data: null,
    });
    
    const [fromCommit, setFromCommit] = useState('');
    const [toCommit, setToCommit] = useState('');
    const [selectedFile, setSelectedFile] = useState('');
    const [currentCommitIndex, setCurrentCommitIndex] = useState(0);
    const [isPlaying, setIsPlaying] = useState(false);
    const [speed, setSpeed] = useState(1);
    const speeds = [0.5, 1, 2, 4];
    
    const loadRepoData = async (url) => {
        setAppState({ view: 'loading', repoUrl: url, error: null, data: null });
        try {
            // The backend URL should be an environment variable in a real app
            const BACKEND_URL = 'http://localhost:3001';
            const response = await fetch(`${BACKEND_URL}/api/analyze`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ repoUrl: url }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Server responded with ${response.status}`);
            }

            const data = await response.json();
            
            setAppState({ view: 'main', repoUrl: url, error: null, data });
            
            if (data.commits && data.commits.length > 0) {
                setFromCommit(data.commits[0].oid);
                setToCommit(data.commits[data.commits.length - 1].oid);
                const firstFile = data.fileTreeHistory?.[0]?.children?.find(c => c.type === 'file');
                setSelectedFile(firstFile?.name || '');
            }

        } catch (e) {
            setAppState(s => ({...s, view: 'error', error: e.message }));
        }
    };
    
    const { commitsInRange, fromIndex } = useMemo(() => {
        if (!appState.data?.commits) return { commitsInRange: [], fromIndex: -1 };
        const fromI = appState.data.commits.findIndex(c => c.oid === fromCommit);
        const toI = appState.data.commits.findIndex(c => c.oid === toCommit);
        if (fromI === -1 || toI === -1 || fromI > toI) return { commitsInRange: [], fromIndex: -1 };
        return { commitsInRange: appState.data.commits.slice(fromI, toI + 1), fromIndex: fromI };
    }, [fromCommit, toCommit, appState.data]);
    
    const currentCommit = commitsInRange[currentCommitIndex] || null;
    const currentFileTree = appState.data?.fileTreeHistory[fromIndex + currentCommitIndex] || null;
    const currentArchNote = appState.data?.architectureNotes[fromIndex + currentCommitIndex] || "";
    const currentArchDiagram = appState.data?.architectureDiagrams[fromIndex + currentCommitIndex] || null;
    const animationProgress = commitsInRange.length > 1 ? currentCommitIndex / (commitsInRange.length - 1) : (commitsInRange.length === 1 ? 1 : 0);

    const handlePlayPause = useCallback(() => { if (currentCommitIndex === commitsInRange.length - 1) { setCurrentCommitIndex(0); setIsPlaying(true); } else { setIsPlaying(prev => !prev); } }, [currentCommitIndex, commitsInRange.length]);
    const handleStep = useCallback((direction) => { setIsPlaying(false); setCurrentCommitIndex(prev => { const next = prev + direction; return Math.max(0, Math.min(next, commitsInRange.length - 1)); }); }, [commitsInRange.length]);
    const handleSpeedChange = () => { const currentIndex = speeds.indexOf(speed); setSpeed(speeds[(currentIndex + 1) % speeds.length]); };
    const handleTimelineChange = (index) => { if (index >= 0 && index < commitsInRange.length) setCurrentCommitIndex(index); };

    useEffect(() => {
        if (isPlaying) {
            const interval = setInterval(() => {
                setCurrentCommitIndex(prev => { if (prev >= commitsInRange.length - 1) { setIsPlaying(false); return prev; } return prev + 1; });
            }, 1500 / speed);
            return () => clearInterval(interval);
        }
    }, [isPlaying, speed, commitsInRange.length]);
    
    useEffect(() => { setCurrentCommitIndex(0); setIsPlaying(false); }, [fromCommit, toCommit]);

    if (appState.view === 'input') return <RepoInput onRepoLoad={loadRepoData} />;
    if (appState.view === 'loading') return <div className="flex items-center justify-center h-screen bg-gray-900 text-white"><Loader2 className="animate-spin h-8 w-8" /> <p className="ml-4">Cloning and analyzing repository... This may take a moment.</p></div>;
    if (appState.view === 'error') return <div className="flex flex-col items-center justify-center h-screen bg-red-900/80 text-white p-4 text-center"><AlertTriangle className="h-12 w-12 text-yellow-300 mb-4" /><h2 className="text-2xl mb-2">Analysis Failed</h2><p className="text-red-200">{appState.error}</p><button onClick={() => setAppState(s=>({...s, view: 'input'}))} className="mt-6 px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg transition-colors">Try Again</button></div>;

    return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex flex-col font-sans">
            <Header repoUrl={appState.repoUrl} onReset={() => setAppState({ view: 'input', repoUrl: '', error: null, data: null })}/>
            <div className="p-4 border-b border-gray-200 dark:border-gray-800"><CommitSelector commits={appState.data.commits} from={fromCommit} to={toCommit} setFrom={setFromCommit} setTo={setToCommit} /></div>
            <main className="flex-grow flex flex-col md:flex-row overflow-hidden">
                <aside className="w-full md:w-1/4 md:max-w-xs flex flex-col border-r-0 md:border-r border-b md:border-b-0 border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-800/50">
                     <div className="flex-1 h-64 md:h-1/2 overflow-y-auto"><FileTreeView tree={currentFileTree} onFileSelect={setSelectedFile} selectedFile={selectedFile} /></div>
                     <div className="flex-shrink-0 h-64 md:h-1/2 border-t border-gray-200 dark:border-gray-800 overflow-y-auto"><CommitHistory commits={commitsInRange} /></div>
                </aside>
                <div className="flex-1 flex flex-col min-h-0">
                    <div className="flex-grow flex flex-col lg:flex-row p-4 overflow-hidden gap-4">
                        <div className="flex-1 min-h-[50vh] lg:min-h-full">
                           <AnimationViewer fromContent={appState.data.fileContents.before} toContent={appState.data.fileContents.after} progress={animationProgress} selectedFile={selectedFile} commit={currentCommit}/>
                        </div>
                        <aside className="w-full lg:w-1/3 flex flex-col gap-4">
                            <div className="flex-1 h-auto lg:h-1/2 lg:min-h-[200px]">
                                <ArchitectureNotes note={currentArchNote} />
                            </div>
                            <div className="flex-1 h-64 lg:h-1/2 lg:min-h-[200px]">
                                <ArchitectureDiagram diagram={currentArchDiagram} />
                            </div>
                        </aside>
                    </div>
                    <div className="flex-shrink-0 border-t border-gray-200 dark:border-gray-800"><Timeline commits={commitsInRange} currentIndex={currentCommitIndex} onTimelineChange={handleTimelineChange} /><PlaybackControls isPlaying={isPlaying} onPlayPause={handlePlayPause} onRewind={() => handleStep(-1)} onFastForward={() => handleStep(1)} speed={speed} onSpeedChange={handleSpeedChange} /></div>
                </div>
            </main>
        </div>
    );
};

export default function App() {
  const [isLibLoaded, setIsLibLoaded] = useState(false);
  useEffect(() => {
    if (window.diff_match_patch) { setIsLibLoaded(true); return; }
    const script = document.createElement('script');
    script.src = "https://cdnjs.cloudflare.com/ajax/libs/diff_match_patch/20121119/diff_match_patch.js";
    script.async = true;
    script.onload = () => setIsLibLoaded(true);
    script.onerror = () => console.error("Failed to load the diff_match_patch library.");
    document.body.appendChild(script);
    return () => { const existingScript = document.querySelector(`script[src="${script.src}"]`); if (existingScript) document.body.removeChild(existingScript); };
  }, []);
  if (!isLibLoaded) return (<div className="flex items-center justify-center h-screen bg-gray-900 text-white"><Loader2 className="animate-spin h-8 w-8" /></div>);
  return (<ThemeProvider><div className="bg-gray-100 dark:bg-gray-900"><AGCE_App /></div></ThemeProvider>);
}

</immersive>
